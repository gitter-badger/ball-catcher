#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
RL Project Report
\end_layout

\begin_layout Abstract
To use reinforcement learning to make a robot arm learn how to catch a ball
 through experience.
 We compare the results by doing this when compared with a deterministic
 algorithm like RRT (Rapidly exploring random tree).
\end_layout

\begin_layout Section
Problem Statement
\end_layout

\begin_layout Standard
The aim of this project is to make a robot arm learn to catch a ball using
 Reinforcement Learning and compare it with conventional techniques or path
 planning.
 We use a robot arm model in Matlab and the corresponding dynamics and use
 an inverse kinematics relation to abstract out the low level control on
 the angles of the links, and learn to move in the 3D cartesian space.
 We compare this with a generic Rapidly exploring random tree.
\end_layout

\begin_layout Section
Robot Arm Model
\end_layout

\begin_layout Standard
In general, the robot arm's model wouldn't matter to the learning algorithm,
 as the learning part has been abstracted to the cartesian 3D space.
 The Robot arm we used was the well known PUMA (Programmable Universal Machine
 for Assembly) arm, which has six degrees of freedon/joints.
 
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename puma-arm.png
	width 25page%

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PUMA arm model in Matlab
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Standard
We took a simple kinematic relation for the robot arms, where a step function
 is used to model the velocity of each link.
 Hence, this brings about an uncertainity whether the arm will be going
 in the direction required in a small time step.
 Due to the velocity constraint on the linkages (and not x, y, z), if the
 arm may not even go towards the target position.
\end_layout

\begin_layout Standard
The arm is displayed in a MATLAB 3D plot using a solidworks model fo the
 PUMA arm and converting it into matlab meshes.
\end_layout

\end_body
\end_document
